import { CALENDAR_RECORD, IB_RECORD, NEWS_TOPIC_RECORD, STEP_RULE_RECORD, SYMBOL_RECORD, TRADE_RECORD, TRADE_TRANS_INFO, TRADE_TRANS_INFO_CLOSE, TRADE_TRANS_INFO_DELETE, TRADE_TRANS_INFO_MODIFY, TRADING_HOURS_RECORD } from '../../interface/Definitions';
import { getChartRequestResponse, getCommissionDefResponse, getCurrentUserDataResponse, getMarginLevelResponse, getMarginTradeResponse, getProfitCalculationResponse, getServerTimeResponse, getTickPricesResponse, getVersionResponse, tradeTransactionResponse, tradeTransactionStatusResponse } from '../../interface/Response';
import { SocketConnections } from './SocketConnections';
import { Time } from "../../utils/Time";
import { CMD_FIELD, PERIOD_FIELD } from "../../interface/Enum";
import { Transaction } from "../Transaction";
import { XAPI } from '../XAPI';
interface SocketListen<T> {
    (returnData: T, jsonReceived: Time, transaction: Transaction, jsonString: string, socketId: string): void;
}
export declare class Socket extends SocketConnections {
    listen: {
        getAllSymbols: (callBack: SocketListen<SYMBOL_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getCalendar: (callBack: SocketListen<CALENDAR_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getChartLastRequest: (callBack: SocketListen<getChartRequestResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getChartRangeRequest: (callBack: SocketListen<getChartRequestResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getCommissionDef: (callBack: SocketListen<getCommissionDefResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getCurrentUserData: (callBack: SocketListen<getCurrentUserDataResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getIbsHistory: (callBack: SocketListen<IB_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getMarginLevel: (callBack: SocketListen<getMarginLevelResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getMarginTrade: (callBack: SocketListen<getMarginTradeResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getNews: (callBack: SocketListen<NEWS_TOPIC_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getProfitCalculation: (callBack: SocketListen<getProfitCalculationResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getServerTime: (callBack: SocketListen<getServerTimeResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getStepRules: (callBack: SocketListen<STEP_RULE_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getSymbol: (callBack: SocketListen<SYMBOL_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getTickPrices: (callBack: SocketListen<getTickPricesResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        getTradeRecords: (callBack: SocketListen<TRADE_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getTrades: (callBack: SocketListen<TRADE_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getTradesHistory: (callBack: SocketListen<TRADE_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getTradingHours: (callBack: SocketListen<TRADING_HOURS_RECORD[]>, key?: string | null) => {
            stopListen: () => void;
        };
        getVersion: (callBack: SocketListen<getVersionResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        tradeTransaction: (callBack: SocketListen<tradeTransactionResponse>, key?: string | null) => {
            stopListen: () => void;
        };
        tradeTransactionStatus: (callBack: SocketListen<tradeTransactionStatusResponse>, key?: string | null) => {
            stopListen: () => void;
        };
    };
    send: {
        getAllSymbols: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: SYMBOL_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getCalendar: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: CALENDAR_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getChartLastRequest: (period: PERIOD_FIELD, start: number, symbol: string, socketId?: string | undefined) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getChartRequestResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getChartRangeRequest: (end: number, period: PERIOD_FIELD, start: number, symbol: string, ticks?: number, socketId?: string | undefined) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getChartRequestResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getCommissionDef: (symbol: string, volume: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getCommissionDefResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getCurrentUserData: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getCurrentUserDataResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getIbsHistory: (start: number, end: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: IB_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getMarginLevel: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getMarginLevelResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getMarginTrade: (symbol: string, volume: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getMarginTradeResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getNews: (start: number, end: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: NEWS_TOPIC_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getProfitCalculation: (closePrice: number, cmd: CMD_FIELD, openPrice: number, symbol: string, volume: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getProfitCalculationResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getServerTime: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getServerTimeResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getStepRules: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: STEP_RULE_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getSymbol: (symbol: string) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: SYMBOL_RECORD;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getTickPrices: (symbols: string[], timestamp?: number, level?: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getTickPricesResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        getTradeRecords: (orders: number[]) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: TRADE_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getTrades: (openedOnly?: boolean) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: TRADE_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getTradesHistory: (start: number, end: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: TRADE_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getTradingHours: (symbols: string[]) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: TRADING_HOURS_RECORD[];
                jsonReceived: Time;
                json: string;
            };
        }>;
        getVersion: () => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: getVersionResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        tradeTransaction: ({ customComment, expiration, cmd, offset, order, price, sl, symbol, tp, type, volume }: TRADE_TRANS_INFO | TRADE_TRANS_INFO_MODIFY | TRADE_TRANS_INFO_CLOSE | TRADE_TRANS_INFO_DELETE) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: any;
        }>;
        tradeTransactionStatus: (order: number) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: tradeTransactionStatusResponse;
                jsonReceived: Time;
                json: string;
            };
        }>;
        ping: (socketId?: string) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: unknown;
                jsonReceived: Time;
                json: string;
            };
        }>;
        logout: (socketId?: string) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: null;
                jsonReceived: Time;
                json: string;
            };
        }>;
        login: (socketId?: string) => Promise<{
            transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
            data: {
                returnData: {
                    streamSessionId: string;
                };
                jsonReceived: Time;
                json: string;
            };
        }>;
    };
    private tradingDisabled;
    private accountId;
    private password;
    private appName?;
    constructor(XAPI: XAPI, accountType: string, host: string, tradingDisabled: boolean, accountId: string, password: string, appName?: string);
}
export {};

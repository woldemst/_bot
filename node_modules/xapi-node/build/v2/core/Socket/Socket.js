"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Socket = void 0;
const SocketConnections_1 = require("./SocketConnections");
const Transaction_1 = require("../Transaction");
class Socket extends SocketConnections_1.SocketConnections {
    constructor(XAPI, accountType, host, tradingDisabled, accountId, password, appName) {
        super(`wss://${host}/${accountType}`, XAPI);
        this.listen = {
            getAllSymbols: (callBack, key = null) => this.addListener('command_' + 'getAllSymbols', callBack, key),
            getCalendar: (callBack, key = null) => this.addListener('command_' + 'getCalendar', callBack, key),
            getChartLastRequest: (callBack, key = null) => this.addListener('command_' + 'getChartLastRequest', callBack, key),
            getChartRangeRequest: (callBack, key = null) => this.addListener('command_' + 'getChartRangeRequest', callBack, key),
            getCommissionDef: (callBack, key = null) => this.addListener('command_' + 'getCommissionDef', callBack, key),
            getCurrentUserData: (callBack, key = null) => this.addListener('command_' + 'getCurrentUserData', callBack, key),
            getIbsHistory: (callBack, key = null) => this.addListener('command_' + 'getIbsHistory', callBack, key),
            getMarginLevel: (callBack, key = null) => this.addListener('command_' + 'getMarginLevel', callBack, key),
            getMarginTrade: (callBack, key = null) => this.addListener('command_' + 'getMarginTrade', callBack, key),
            getNews: (callBack, key = null) => this.addListener('command_' + 'getNews', callBack, key),
            getProfitCalculation: (callBack, key = null) => this.addListener('command_' + 'getProfitCalculation', callBack, key),
            getServerTime: (callBack, key = null) => this.addListener('command_' + 'getServerTime', callBack, key),
            getStepRules: (callBack, key = null) => this.addListener('command_' + 'getStepRules', callBack, key),
            getSymbol: (callBack, key = null) => this.addListener('command_' + 'getSymbol', callBack, key),
            getTickPrices: (callBack, key = null) => this.addListener('command_' + 'getTickPrices', callBack, key),
            getTradeRecords: (callBack, key = null) => this.addListener('command_' + 'getTradeRecords', callBack, key),
            getTrades: (callBack, key = null) => this.addListener('command_' + 'getTrades', callBack, key),
            getTradesHistory: (callBack, key = null) => this.addListener('command_' + 'getTradesHistory', callBack, key),
            getTradingHours: (callBack, key = null) => this.addListener('command_' + 'getTradingHours', callBack, key),
            getVersion: (callBack, key = null) => this.addListener('command_' + 'getVersion', callBack, key),
            tradeTransaction: (callBack, key = null) => this.addListener('command_' + 'tradeTransaction', callBack, key),
            tradeTransactionStatus: (callBack, key = null) => this.addListener('command_' + 'tradeTransactionStatus', callBack, key),
        };
        this.send = {
            getAllSymbols: () => this.sendCommand('getAllSymbols'),
            getCalendar: () => this.sendCommand('getCalendar'),
            getChartLastRequest: (period, start, symbol, socketId = undefined) => this.sendCommand('getChartLastRequest', {
                info: {
                    period,
                    start,
                    symbol,
                },
            }, null, false, socketId),
            getChartRangeRequest: (end, period, start, symbol, ticks = 0, socketId = undefined) => this.sendCommand('getChartRangeRequest', {
                info: {
                    end,
                    period,
                    start,
                    symbol,
                    ticks,
                },
            }, null, false, socketId),
            getCommissionDef: (symbol, volume) => this.sendCommand('getCommissionDef', {
                symbol,
                volume,
            }),
            getCurrentUserData: () => this.sendCommand('getCurrentUserData'),
            getIbsHistory: (start, end) => this.sendCommand('getIbsHistory', {
                end,
                start,
            }),
            getMarginLevel: () => this.sendCommand('getMarginLevel'),
            getMarginTrade: (symbol, volume) => this.sendCommand('getMarginTrade', {
                symbol,
                volume,
            }),
            getNews: (start, end) => this.sendCommand('getNews', {
                start,
                end,
            }),
            getProfitCalculation: (closePrice, cmd, openPrice, symbol, volume) => this.sendCommand('getProfitCalculation', {
                closePrice,
                cmd,
                openPrice,
                symbol,
                volume,
            }),
            getServerTime: () => this.sendCommand('getServerTime', {}, null, true),
            getStepRules: () => this.sendCommand('getStepRules'),
            getSymbol: (symbol) => this.sendCommand('getSymbol', {
                symbol,
            }),
            getTickPrices: (symbols, timestamp = 0, level = -1) => this.sendCommand('getTickPrices', {
                level,
                symbols,
                timestamp,
            }),
            getTradeRecords: (orders) => this.sendCommand('getTradeRecords', {
                orders,
            }),
            getTrades: (openedOnly = true) => this.sendCommand('getTrades', {
                openedOnly,
            }),
            getTradesHistory: (start, end) => this.sendCommand('getTradesHistory', {
                end,
                start,
            }),
            getTradingHours: (symbols) => this.sendCommand('getTradingHours', { symbols }),
            getVersion: () => this.sendCommand('getVersion'),
            tradeTransaction: ({ customComment, expiration, cmd, offset, order, price, sl, symbol, tp, type, volume }) => {
                this.XAPI.logger.transaction({ source: 'src/v2/core/Socket/Socket.ts', function: 'send.tradeTransaction', data: {
                        input: [{ customComment, expiration, cmd, offset, order, price, sl, symbol, tp, type, volume }],
                        state: 'before'
                    } });
                if (this.tradingDisabled) {
                    const t = new Transaction_1.Transaction();
                    t.reject(new Error('trading disabled (tradingDisabled === true)'));
                    this.XAPI.logger.transaction({ source: 'src/v2/core/Socket/Socket.ts', function: 'send.tradeTransaction', data: {
                            input: [{ customComment, expiration, cmd, offset, order, price, sl, symbol, tp, type, volume }],
                            result: { error: { message: 'trading disabled (tradingDisabled === true)' } },
                            state: 'end'
                        } });
                    return t.promise;
                }
                const transactionId = this.createTransactionId();
                return this.sendCommand('tradeTransaction', {
                    tradeTransInfo: {
                        cmd,
                        customComment: !customComment ? `x${transactionId}` : `x${transactionId}_${customComment}`,
                        expiration: expiration instanceof Date
                            ? expiration.getTime()
                            : expiration,
                        offset,
                        order,
                        price,
                        sl,
                        symbol,
                        tp,
                        type,
                        volume: volume === undefined ? undefined : parseFloat(volume.toFixed(2)),
                    },
                }, transactionId, true);
            },
            tradeTransactionStatus: (order) => this.sendCommand('tradeTransactionStatus', {
                order,
            }),
            ping: (socketId) => this.sendCommand('ping', {}, null, false, socketId),
            logout: (socketId) => this.sendCommand('logout', {}, null, true, socketId),
            login: (socketId) => this.sendCommand('login', {
                userId: this.accountId,
                password: this.password,
                appName: this.appName,
            }, null, true, socketId),
        };
        this.tradingDisabled = tradingDisabled;
        this.accountId = accountId;
        this.password = password;
        this.appName = appName;
    }
}
exports.Socket = Socket;
//# sourceMappingURL=Socket.js.map
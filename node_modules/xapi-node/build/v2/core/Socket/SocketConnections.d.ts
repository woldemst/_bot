import { Listener } from '../../utils/Listener';
import { SocketConnection } from './SocketConnection';
import { Transaction } from '../Transaction';
import { Time } from '../../utils/Time';
import { Increment } from "../../utils/Increment";
import { XAPI } from "../XAPI";
export declare class SocketConnections extends Listener {
    connections: Record<string, SocketConnection>;
    transactions: Record<string, Transaction>;
    private url;
    protected XAPI: XAPI;
    constructor(url: string, XAPI: XAPI);
    onClose(callback: (socketId: string, connection: SocketConnection) => void): {
        stopListen: () => void;
    };
    onOpen(callback: (socketId: string, connection: SocketConnection) => void): {
        stopListen: () => void;
    };
    socketIdIncrement: Increment;
    connect(timeoutMs: number): Promise<string>;
    transactionIncrement: Increment;
    protected createTransactionId(): string;
    getSocketId(): string | undefined;
    protected sendCommand<T>(command: string, args?: any, transactionId?: string | null, priority?: boolean, socketId?: string | undefined): Promise<{
        transaction: Transaction;
        data: {
            returnData: T;
            jsonReceived: Time;
            json: string;
        };
    }>;
}

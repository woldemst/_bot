import { STREAMING_BALANCE_RECORD, STREAMING_CANDLE_RECORD, STREAMING_KEEP_ALIVE_RECORD, STREAMING_NEWS_RECORD, STREAMING_PROFIT_RECORD, STREAMING_TICK_RECORD, STREAMING_TRADE_RECORD, STREAMING_TRADE_STATUS_RECORD } from '../../interface/Definitions';
import { Time } from '../../utils/Time';
import { StreamConnections } from './StreamConnections';
import { XAPI } from "../XAPI";
interface StreamListen<T> {
    (data: T, time: Time, jsonString: string, streamId: string): void;
}
export declare class Stream extends StreamConnections {
    listen: {
        getBalance: (callBack: StreamListen<STREAMING_BALANCE_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getCandles: (callBack: StreamListen<STREAMING_CANDLE_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getKeepAlive: (callBack: StreamListen<STREAMING_KEEP_ALIVE_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getNews: (callBack: StreamListen<STREAMING_NEWS_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getProfits: (callBack: StreamListen<STREAMING_PROFIT_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getTickPrices: (callBack: StreamListen<STREAMING_TICK_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getTrades: (callBack: StreamListen<STREAMING_TRADE_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
        getTradeStatus: (callBack: StreamListen<STREAMING_TRADE_STATUS_RECORD>, key?: string | null) => {
            stopListen: () => void;
        };
    };
    subscribe: {
        getBalance: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getCandles: (symbol: string, streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getKeepAlive: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getNews: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getProfits: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTickPrices: (symbol: string, minArrivalTime?: number, maxLevel?: number, streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTrades: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTradeStatus: (streamId?: string | undefined) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
    };
    subscribeOnStream(streamId?: string | undefined): {
        getBalance: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getCandles: (symbol: string) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getKeepAlive: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getNews: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getProfits: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTickPrices: (symbol: string, minArrivalTime?: number, maxLevel?: number) => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTrades: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
        getTradeStatus: () => Promise<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>;
    };
    unSubscribe: {
        getBalance: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getCandles: (symbol: string) => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getKeepAlive: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getNews: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getProfits: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getTickPrices: (symbol: string) => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getTrades: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
        getTradeStatus: () => Promise<undefined> | Promise<PromiseSettledResult<{
            transaction: import("../Transaction").Transaction<{
                json: string;
            }, {
                sent?: Time | undefined;
            }>;
            data: any;
        }>[]>;
    };
    constructor(accountType: string, host: string, XAPI: XAPI);
}
export {};

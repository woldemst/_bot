"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const StreamConnections_1 = require("./StreamConnections");
class Stream extends StreamConnections_1.StreamConnections {
    subscribeOnStream(streamId = undefined) {
        return {
            getBalance: () => this.sendSubscribe('Balance', {}, streamId),
            getCandles: (symbol) => this.sendSubscribe('Candles', { symbol }, streamId),
            getKeepAlive: () => this.sendSubscribe('KeepAlive', {}, streamId),
            getNews: () => this.sendSubscribe('News', {}, streamId),
            getProfits: () => this.sendSubscribe('Profits', {}, streamId),
            getTickPrices: (symbol, minArrivalTime = 0, maxLevel = 6) => this.sendSubscribe('TickPrices', { symbol, minArrivalTime, maxLevel }, streamId),
            getTrades: () => this.sendSubscribe('Trades', {}, streamId),
            getTradeStatus: () => this.sendSubscribe('TradeStatus', {}, streamId),
        };
    }
    constructor(accountType, host, XAPI) {
        super(`wss://${host}/${accountType}Stream`, XAPI);
        this.listen = {
            getBalance: (callBack, key = null) => this.addListener('command_balance', callBack, key),
            getCandles: (callBack, key = null) => this.addListener('command_candle', callBack, key),
            getKeepAlive: (callBack, key = null) => this.addListener('command_keepAlive', callBack, key),
            getNews: (callBack, key = null) => this.addListener('command_news', callBack, key),
            getProfits: (callBack, key = null) => this.addListener('command_profit', callBack, key),
            getTickPrices: (callBack, key = null) => this.addListener('command_tickPrices', callBack, key),
            getTrades: (callBack, key = null) => this.addListener('command_trade', callBack, key),
            getTradeStatus: (callBack, key = null) => this.addListener('command_tradeStatus', callBack, key),
        };
        this.subscribe = {
            getBalance: (streamId = undefined) => this.sendSubscribe('Balance', {}, streamId),
            getCandles: (symbol, streamId = undefined) => this.sendSubscribe('Candles', { symbol }, streamId),
            getKeepAlive: (streamId = undefined) => this.sendSubscribe('KeepAlive', {}, streamId),
            getNews: (streamId = undefined) => this.sendSubscribe('News', {}, streamId),
            getProfits: (streamId = undefined) => this.sendSubscribe('Profits', {}, streamId),
            getTickPrices: (symbol, minArrivalTime = 0, maxLevel = 6, streamId = undefined) => this.sendSubscribe('TickPrices', { symbol, minArrivalTime, maxLevel }, streamId),
            getTrades: (streamId = undefined) => this.sendSubscribe('Trades', {}, streamId),
            getTradeStatus: (streamId = undefined) => this.sendSubscribe('TradeStatus', {}, streamId),
        };
        this.unSubscribe = {
            getBalance: () => this.sendUnsubscribe('Balance'),
            getCandles: (symbol) => this.sendUnsubscribe('Candles', { symbol }),
            getKeepAlive: () => this.sendUnsubscribe('KeepAlive'),
            getNews: () => this.sendUnsubscribe('News'),
            getProfits: () => this.sendUnsubscribe('Profits'),
            getTickPrices: (symbol) => this.sendUnsubscribe('TickPrices', { symbol }),
            getTrades: () => this.sendUnsubscribe('Trades'),
            getTradeStatus: () => this.sendUnsubscribe('TradeStatus'),
        };
    }
}
exports.Stream = Stream;
//# sourceMappingURL=Stream.js.map
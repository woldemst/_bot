import { WebSocketWrapper } from '../../utils/WebSocketWrapper';
import { Time } from "../../utils/Time";
import { Transaction } from "../Transaction";
import { XAPI } from "../XAPI";
export declare class StreamConnection {
    connectedTime: Time | null;
    lastReceivedMessage: Time | null;
    capacity: Time[];
    protected WebSocket: WebSocketWrapper;
    private session;
    socketId: string;
    streamId: string;
    private queue;
    private queueTimer;
    private callListener;
    private connectionProgress;
    private disconnectionProgress;
    private XAPI;
    constructor(url: string, session: string, callListener: (listenerId: string, params?: any[]) => void, streamId: string, socketId: string, XAPI: XAPI);
    get status(): 'CONNECTING' | 'CONNECTED' | 'DISCONNECTED';
    connect(timeoutMs: number): Promise<{
        transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
        data: any;
    }>;
    close(): Promise<void> | Promise<{
        transaction: Transaction<Record<string | number, any>, Record<string | number, any>>;
        data: any;
    }>;
    ping(): Promise<{
        transaction: Transaction<{
            json: string;
        }, {
            sent?: Time | undefined;
        }>;
        data: any;
    }>;
    sendCommand(command: string, completion?: Record<string, any>): Promise<{
        transaction: Transaction<{
            json: string;
        }, {
            sent?: Time;
        }>;
        data: any;
    }>;
    private cleanQueue;
    private callCleaner;
    protected send(transaction: Transaction<{
        json: string;
    }, {
        sent?: Time;
    }>): Promise<{
        transaction: Transaction<{
            json: string;
        }, {
            sent?: Time;
        }>;
        data: any;
    }>;
}

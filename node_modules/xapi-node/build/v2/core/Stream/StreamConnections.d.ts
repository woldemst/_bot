import { Listener } from '../../utils/Listener';
import { StreamConnection } from "./StreamConnection";
import { Increment } from "../../utils/Increment";
import { Time } from "../../utils/Time";
import { XAPI } from "../XAPI";
export declare class StreamConnections extends Listener {
    connections: Record<string, StreamConnection>;
    subscribes: Record<string, Record<string, Record<string, Time>>>;
    private url;
    protected XAPI: XAPI;
    constructor(url: string, XAPI: XAPI);
    onClose(callback: (streamId: string, connection: StreamConnection) => void): {
        stopListen: () => void;
    };
    onOpen(callback: (streamId: string, connection: StreamConnection) => void): {
        stopListen: () => void;
    };
    streamIdIncrement: Increment;
    connect(timeoutMs: number, session: string, socketId: string): Promise<string>;
    getStreamId(command: string, completion?: Record<string, string | number>): string | undefined;
    protected sendSubscribe(command: string, completion?: Record<string, string | number>, streamId?: string | undefined): Promise<{
        transaction: import("../Transaction").Transaction<{
            json: string;
        }, {
            sent?: Time | undefined;
        }>;
        data: any;
    }>;
    protected sendUnsubscribe(command: string, completion?: Record<string, string | number>): Promise<undefined> | Promise<PromiseSettledResult<{
        transaction: import("../Transaction").Transaction<{
            json: string;
        }, {
            sent?: Time | undefined;
        }>;
        data: any;
    }>[]>;
}

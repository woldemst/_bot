"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
const Increment_1 = require("./Increment");
class Listener {
    constructor() {
        this.increment = new Increment_1.Increment();
        this._listeners = {};
    }
    get listeners() {
        return this._listeners;
    }
    remove(listenerId, key) {
        if (this._listeners[listenerId] !== undefined
            && this._listeners[listenerId][key] !== undefined) {
            delete this._listeners[listenerId][key];
            if (Object.keys(this._listeners[listenerId]).length === 0) {
                delete this._listeners[listenerId];
            }
        }
    }
    addListener(listenerId, callBack, key = null) {
        if (typeof callBack === 'function') {
            if (this._listeners[listenerId] === undefined) {
                this._listeners[listenerId] = {};
            }
            key = key === null
                ? `g${new Date().getTime()}${this.increment.id}`
                : `s${key}`;
            this._listeners[listenerId][key] = callBack;
            return {
                stopListen: () => this.remove(listenerId, key)
            };
        }
        throw new Error('addListener "callBack" parameter is not callback');
    }
    callListener(listenerId, params = []) {
        if (this._listeners[listenerId] !== undefined) {
            Object.keys(this._listeners[listenerId]).forEach((key) => {
                try {
                    this._listeners[listenerId][key](...params);
                }
                catch (e) {
                }
            });
        }
    }
    fetchListener(listenerId, params = []) {
        const values = [];
        if (this._listeners[listenerId] !== undefined) {
            Object.keys(this._listeners[listenerId]).forEach((key) => {
                try {
                    values.push({
                        key,
                        data: this._listeners[listenerId][key](...params)
                    });
                }
                catch (e) {
                    values.push({ key, error: e });
                }
            });
        }
        return values;
    }
}
exports.Listener = Listener;
//# sourceMappingURL=Listener.js.map
import { Listener } from "./Listener";
type X = Record<string, any> | string;
export declare class Logger<T = X, I = X, W = X, E = X, D = X> extends Listener {
    on({ type, callback, key, }: ({
        type: string;
        callback: (data: Record<string, any> | string) => void;
        key?: string | null;
    } | {
        type: 'transaction';
        callback: (data: T) => void;
        key?: string | null;
    } | {
        type: 'info';
        callback: (data: I) => void;
        key?: string | null;
    } | {
        type: 'warn';
        callback: (data: W) => void;
        key?: string | null;
    } | {
        type: 'error';
        callback: (data: E) => void;
        key?: string | null;
    } | {
        type: 'debug';
        callback: (data: D) => void;
        key?: string | null;
    })): {
        stopListen: () => void;
    };
    call(type: string, data: Record<string, any> | string): void;
    transaction(data: T): void;
    info(data: I): void;
    warn(data: W): void;
    error(data: E): void;
    debug(data: D): void;
}
export {};

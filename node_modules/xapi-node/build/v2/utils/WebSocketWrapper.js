"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketWrapper = exports.isNodeJS = void 0;
const Listener_1 = require("./Listener");
const Timer_1 = require("./Timer");
const isNodeJS = () => typeof window === 'undefined' && typeof module !== 'undefined' && module.exports;
exports.isNodeJS = isNodeJS;
function getWS() {
    if (process.env.ES_TARGET == 'esm') {
        return Promise.resolve().then(() => require('ws'));
    }
    else {
        return new Promise(resolve => resolve(require('ws')));
    }
}
class WebSocketWrapper extends Listener_1.Listener {
    constructor(url, tryReconnectOnFail = true) {
        super();
        this.ws = null;
        this._tryReconnect = false;
        this._connectionTimeout = new Timer_1.Timer();
        this._status = false;
        this._connecting = false;
        this.url = url;
        this._tryReconnect = tryReconnectOnFail;
        this.onOpen(() => {
            this._connectionTimeout.clear();
        });
        this.onClose(() => {
            if (this._tryReconnect) {
                this._connectionTimeout.setTimeout(() => {
                    if (this._tryReconnect) {
                        this.connect();
                    }
                }, 3000);
            }
        });
    }
    get status() {
        return this._status;
    }
    get connecting() {
        return this._connecting;
    }
    connect() {
        this._connectionTimeout.clear();
        if ((0, exports.isNodeJS)()) {
            getWS().then(WebSocketClient => {
                this._connecting = true;
                this.ws = new WebSocketClient(this.url);
                this.ws.on('open', () => {
                    if (this._status === false) {
                        this._status = true;
                        this._connecting = false;
                        this.callListener('ws_statusChange', [true]);
                    }
                    else {
                        this._connecting = false;
                    }
                    this.callListener('ws_open');
                });
                this.ws.on('close', () => {
                    if (this._status) {
                        this._status = false;
                        this._connecting = false;
                        this.callListener('ws_statusChange', [false]);
                    }
                    else {
                        this._connecting = false;
                    }
                    this.callListener('ws_close');
                });
                this.ws.on('message', (message) => {
                    this.callListener('ws_message', [message]);
                });
                this.ws.on('error', (error) => {
                    this.callListener('ws_error', [error]);
                });
            });
        }
        else {
            this._connecting = true;
            this.ws = new WebSocket(this.url);
            this.ws.onopen = () => {
                if (this._status === false) {
                    this._status = true;
                    this._connecting = false;
                    this.callListener('ws_statusChange', [true]);
                }
                else {
                    this._connecting = false;
                }
                this.callListener('ws_open');
            };
            this.ws.onclose = () => {
                if (this._status) {
                    this._status = false;
                    this._connecting = false;
                    this.callListener('ws_statusChange', [false]);
                }
                else {
                    this._connecting = false;
                }
                this.callListener('ws_close');
            };
            this.ws.onmessage = (event) => {
                this.callListener('ws_message', [event.data]);
            };
            this.ws.onerror = (error) => {
                this.callListener('ws_error', [error]);
            };
        }
    }
    onStatusChange(callback) {
        this.addListener('ws_statusChange', callback);
    }
    onOpen(callback) {
        this.addListener('ws_open', callback);
    }
    onMessage(callback) {
        this.addListener('ws_message', callback);
    }
    onError(callback) {
        this.addListener('ws_error', callback);
    }
    onClose(callback) {
        this.addListener('ws_close', callback);
    }
    send(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.status) {
                this.ws.send(data);
            }
            else {
                throw new Error(this.url + ' websocket is not connected');
            }
        });
    }
    close() {
        this._connectionTimeout.clear();
        this._tryReconnect = false;
        this._connecting = false;
        this.ws && this.ws.close();
    }
}
exports.WebSocketWrapper = WebSocketWrapper;
//# sourceMappingURL=WebSocketWrapper.js.map